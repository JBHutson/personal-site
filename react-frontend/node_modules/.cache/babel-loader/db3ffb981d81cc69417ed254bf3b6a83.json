{"ast":null,"code":"import _slicedToArray from \"/Users/jameshutson/Code/jameshutson_v2.0/personal-site/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/jameshutson/Code/jameshutson_v2.0/personal-site/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jameshutson/Code/jameshutson_v2.0/personal-site/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _objectWithoutProperties from \"/Users/jameshutson/Code/jameshutson_v2.0/personal-site/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { hasFormatToParts, hasIntl, padStart, roundTo, hasRelative } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport Formatter from \"./formatter.js\";\nvar intlDTCache = {};\n\nfunction getCachedDTF(locString) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var key = JSON.stringify([locString, opts]);\n  var dtf = intlDTCache[key];\n\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n\n  return dtf;\n}\n\nvar intlNumCache = {};\n\nfunction getCachedINF(locString) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var key = JSON.stringify([locString, opts]);\n  var inf = intlNumCache[key];\n\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n\n  return inf;\n}\n\nvar intlRelCache = {};\n\nfunction getCachedRTF(locString) {\n  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var base = opts.base,\n      cacheKeyOpts = _objectWithoutProperties(opts, [\"base\"]); // exclude `base` from the options\n\n\n  var key = JSON.stringify([locString, cacheKeyOpts]);\n  var inf = intlRelCache[key];\n\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n\n  return inf;\n}\n\nvar sysLocaleCache = null;\n\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else if (hasIntl()) {\n    var computedSys = new Intl.DateTimeFormat().resolvedOptions().locale; // node sometimes defaults to \"und\". Override that because that is dumb\n\n    sysLocaleCache = !computedSys || computedSys === \"und\" ? \"en-US\" : computedSys;\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = \"en-US\";\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n  var uIndex = localeStr.indexOf(\"-u-\");\n\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    var options;\n    var smaller = localeStr.substring(0, uIndex);\n\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    var _options = options,\n        numberingSystem = _options.numberingSystem,\n        calendar = _options.calendar; // return the smaller one so that we can append the calendar and numbering overrides to it\n\n    return [smaller, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (hasIntl()) {\n    if (outputCalendar || numberingSystem) {\n      localeStr += \"-u\";\n\n      if (outputCalendar) {\n        localeStr += \"-ca-\".concat(outputCalendar);\n      }\n\n      if (numberingSystem) {\n        localeStr += \"-nu-\".concat(numberingSystem);\n      }\n\n      return localeStr;\n    } else {\n      return localeStr;\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction mapMonths(f) {\n  var ms = [];\n\n  for (var i = 1; i <= 12; i++) {\n    var dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  var ms = [];\n\n  for (var i = 1; i <= 7; i++) {\n    var dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  var mode = loc.listingMode(defaultOK);\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return loc.numberingSystem === \"latn\" || !loc.locale || loc.locale.startsWith(\"en\") || hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\";\n  }\n}\n/**\n * @private\n */\n\n\nvar PolyNumberFormatter = /*#__PURE__*/function () {\n  function PolyNumberFormatter(intl, forceSimple, opts) {\n    _classCallCheck(this, PolyNumberFormatter);\n\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    if (!forceSimple && hasIntl()) {\n      var intlOpts = {\n        useGrouping: false\n      };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  _createClass(PolyNumberFormatter, [{\n    key: \"format\",\n    value: function format(i) {\n      if (this.inf) {\n        var fixed = this.floor ? Math.floor(i) : i;\n        return this.inf.format(fixed);\n      } else {\n        // to match the browser's numberformatter defaults\n        var _fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n\n        return padStart(_fixed, this.padTo);\n      }\n    }\n  }]);\n\n  return PolyNumberFormatter;\n}();\n/**\n * @private\n */\n\n\nvar PolyDateFormatter = /*#__PURE__*/function () {\n  function PolyDateFormatter(dt, intl, opts) {\n    _classCallCheck(this, PolyDateFormatter);\n\n    this.opts = opts;\n    this.hasIntl = hasIntl();\n    var z;\n\n    if (dt.zone.universal && this.hasIntl) {\n      // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.\n      // So we have to make do. Two cases:\n      // 1. The format options tell us to show the zone. We can't do that, so the best\n      // we can do is format the date in UTC.\n      // 2. The format options don't tell us to show the zone. Then we can adjust them\n      // the time and tell the formatter to show it to us in UTC, so that the time is right\n      // and the bad zone doesn't show up.\n      // We can clean all this up when Chrome fixes this.\n      z = \"UTC\";\n\n      if (opts.timeZoneName) {\n        this.dt = dt;\n      } else {\n        this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n      }\n    } else if (dt.zone.type === \"local\") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    if (this.hasIntl) {\n      var intlOpts = Object.assign({}, this.opts);\n\n      if (z) {\n        intlOpts.timeZone = z;\n      }\n\n      this.dtf = getCachedDTF(intl, intlOpts);\n    }\n  }\n\n  _createClass(PolyDateFormatter, [{\n    key: \"format\",\n    value: function format() {\n      if (this.hasIntl) {\n        return this.dtf.format(this.dt.toJSDate());\n      } else {\n        var tokenFormat = English.formatString(this.opts),\n            loc = Locale.create(\"en-US\");\n        return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);\n      }\n    }\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts() {\n      if (this.hasIntl && hasFormatToParts()) {\n        return this.dtf.formatToParts(this.dt.toJSDate());\n      } else {\n        // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings\n        // and IMO it's too weird to have an uncanny valley like that\n        return [];\n      }\n    }\n  }, {\n    key: \"resolvedOptions\",\n    value: function resolvedOptions() {\n      if (this.hasIntl) {\n        return this.dtf.resolvedOptions();\n      } else {\n        return {\n          locale: \"en-US\",\n          numberingSystem: \"latn\",\n          outputCalendar: \"gregory\"\n        };\n      }\n    }\n  }]);\n\n  return PolyDateFormatter;\n}();\n/**\n * @private\n */\n\n\nvar PolyRelFormatter = /*#__PURE__*/function () {\n  function PolyRelFormatter(intl, isEnglish, opts) {\n    _classCallCheck(this, PolyRelFormatter);\n\n    this.opts = Object.assign({\n      style: \"long\"\n    }, opts);\n\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  _createClass(PolyRelFormatter, [{\n    key: \"format\",\n    value: function format(count, unit) {\n      if (this.rtf) {\n        return this.rtf.format(count, unit);\n      } else {\n        return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n      }\n    }\n  }, {\n    key: \"formatToParts\",\n    value: function formatToParts(count, unit) {\n      if (this.rtf) {\n        return this.rtf.formatToParts(count, unit);\n      } else {\n        return [];\n      }\n    }\n  }]);\n\n  return PolyRelFormatter;\n}();\n/**\n * @private\n */\n\n\nvar Locale = /*#__PURE__*/function () {\n  _createClass(Locale, null, [{\n    key: \"fromOpts\",\n    value: function fromOpts(opts) {\n      return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n    }\n  }, {\n    key: \"create\",\n    value: function create(locale, numberingSystem, outputCalendar) {\n      var defaultToEN = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var specifiedLocale = locale || Settings.defaultLocale,\n          // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n      localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale()),\n          numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,\n          outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n      return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n    }\n  }, {\n    key: \"resetCache\",\n    value: function resetCache() {\n      sysLocaleCache = null;\n      intlDTCache = {};\n      intlNumCache = {};\n      intlRelCache = {};\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          locale = _ref.locale,\n          numberingSystem = _ref.numberingSystem,\n          outputCalendar = _ref.outputCalendar;\n\n      return Locale.create(locale, numberingSystem, outputCalendar);\n    }\n  }]);\n\n  function Locale(locale, numbering, outputCalendar, specifiedLocale) {\n    _classCallCheck(this, Locale);\n\n    var _parseLocaleString = parseLocaleString(locale),\n        _parseLocaleString2 = _slicedToArray(_parseLocaleString, 3),\n        parsedLocale = _parseLocaleString2[0],\n        parsedNumberingSystem = _parseLocaleString2[1],\n        parsedOutputCalendar = _parseLocaleString2[2];\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n    this.weekdaysCache = {\n      format: {},\n      standalone: {}\n    };\n    this.monthsCache = {\n      format: {},\n      standalone: {}\n    };\n    this.meridiemCache = null;\n    this.eraCache = {};\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  _createClass(Locale, [{\n    key: \"listingMode\",\n    value: function listingMode() {\n      var defaultOK = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var intl = hasIntl(),\n          hasFTP = intl && hasFormatToParts(),\n          isActuallyEn = this.isEnglish(),\n          hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === \"latn\") && (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n\n      if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {\n        return \"error\";\n      } else if (!hasFTP || isActuallyEn && hasNoWeirdness) {\n        return \"en\";\n      } else {\n        return \"intl\";\n      }\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(alts) {\n      if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n        return this;\n      } else {\n        return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);\n      }\n    }\n  }, {\n    key: \"redefaultToEN\",\n    value: function redefaultToEN() {\n      var alts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.clone(Object.assign({}, alts, {\n        defaultToEN: true\n      }));\n    }\n  }, {\n    key: \"redefaultToSystem\",\n    value: function redefaultToSystem() {\n      var alts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.clone(Object.assign({}, alts, {\n        defaultToEN: false\n      }));\n    }\n  }, {\n    key: \"months\",\n    value: function months(length) {\n      var _this = this;\n\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var defaultOK = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return listStuff(this, length, defaultOK, English.months, function () {\n        var intl = format ? {\n          month: length,\n          day: \"numeric\"\n        } : {\n          month: length\n        },\n            formatStr = format ? \"format\" : \"standalone\";\n\n        if (!_this.monthsCache[formatStr][length]) {\n          _this.monthsCache[formatStr][length] = mapMonths(function (dt) {\n            return _this.extract(dt, intl, \"month\");\n          });\n        }\n\n        return _this.monthsCache[formatStr][length];\n      });\n    }\n  }, {\n    key: \"weekdays\",\n    value: function weekdays(length) {\n      var _this2 = this;\n\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var defaultOK = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return listStuff(this, length, defaultOK, English.weekdays, function () {\n        var intl = format ? {\n          weekday: length,\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\"\n        } : {\n          weekday: length\n        },\n            formatStr = format ? \"format\" : \"standalone\";\n\n        if (!_this2.weekdaysCache[formatStr][length]) {\n          _this2.weekdaysCache[formatStr][length] = mapWeekdays(function (dt) {\n            return _this2.extract(dt, intl, \"weekday\");\n          });\n        }\n\n        return _this2.weekdaysCache[formatStr][length];\n      });\n    }\n  }, {\n    key: \"meridiems\",\n    value: function meridiems() {\n      var _this3 = this;\n\n      var defaultOK = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return listStuff(this, undefined, defaultOK, function () {\n        return English.meridiems;\n      }, function () {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!_this3.meridiemCache) {\n          var intl = {\n            hour: \"numeric\",\n            hour12: true\n          };\n          _this3.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(function (dt) {\n            return _this3.extract(dt, intl, \"dayperiod\");\n          });\n        }\n\n        return _this3.meridiemCache;\n      });\n    }\n  }, {\n    key: \"eras\",\n    value: function eras(length) {\n      var _this4 = this;\n\n      var defaultOK = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return listStuff(this, length, defaultOK, English.eras, function () {\n        var intl = {\n          era: length\n        }; // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n        // to definitely enumerate them.\n\n        if (!_this4.eraCache[length]) {\n          _this4.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(function (dt) {\n            return _this4.extract(dt, intl, \"era\");\n          });\n        }\n\n        return _this4.eraCache[length];\n      });\n    }\n  }, {\n    key: \"extract\",\n    value: function extract(dt, intlOpts, field) {\n      var df = this.dtFormatter(dt, intlOpts),\n          results = df.formatToParts(),\n          matching = results.find(function (m) {\n        return m.type.toLowerCase() === field;\n      });\n      return matching ? matching.value : null;\n    }\n  }, {\n    key: \"numberFormatter\",\n    value: function numberFormatter() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n      // (in contrast, the rest of the condition is used heavily)\n      return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n    }\n  }, {\n    key: \"dtFormatter\",\n    value: function dtFormatter(dt) {\n      var intlOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new PolyDateFormatter(dt, this.intl, intlOpts);\n    }\n  }, {\n    key: \"relFormatter\",\n    value: function relFormatter() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n    }\n  }, {\n    key: \"isEnglish\",\n    value: function isEnglish() {\n      return this.locale === \"en\" || this.locale.toLowerCase() === \"en-us\" || hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\");\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;\n    }\n  }, {\n    key: \"fastNumbers\",\n    get: function get() {\n      if (this.fastNumbersCached == null) {\n        this.fastNumbersCached = supportsFastNumbers(this);\n      }\n\n      return this.fastNumbersCached;\n    }\n  }]);\n\n  return Locale;\n}();\n\nexport { Locale as default };","map":{"version":3,"sources":["/Users/jameshutson/Code/jameshutson_v2.0/personal-site/react-frontend/node_modules/luxon/src/impl/locale.js"],"names":["hasFormatToParts","hasIntl","padStart","roundTo","hasRelative","English","Settings","DateTime","Formatter","intlDTCache","getCachedDTF","locString","opts","key","JSON","stringify","dtf","Intl","DateTimeFormat","intlNumCache","getCachedINF","inf","NumberFormat","intlRelCache","getCachedRTF","base","cacheKeyOpts","RelativeTimeFormat","sysLocaleCache","systemLocale","computedSys","resolvedOptions","locale","parseLocaleString","localeStr","uIndex","indexOf","options","smaller","substring","e","numberingSystem","calendar","intlConfigString","outputCalendar","mapMonths","f","ms","i","dt","utc","push","mapWeekdays","listStuff","loc","length","defaultOK","englishFn","intlFn","mode","listingMode","supportsFastNumbers","startsWith","intl","PolyNumberFormatter","forceSimple","padTo","floor","intlOpts","useGrouping","minimumIntegerDigits","fixed","Math","format","PolyDateFormatter","z","zone","universal","timeZoneName","offset","fromMillis","ts","type","name","Object","assign","timeZone","toJSDate","tokenFormat","formatString","Locale","create","formatDateTimeFromString","formatToParts","PolyRelFormatter","isEnglish","style","rtf","count","unit","formatRelativeTime","numeric","defaultToEN","specifiedLocale","defaultLocale","localeR","numberingSystemR","defaultNumberingSystem","outputCalendarR","defaultOutputCalendar","numbering","parsedLocale","parsedNumberingSystem","parsedOutputCalendar","weekdaysCache","standalone","monthsCache","meridiemCache","eraCache","fastNumbersCached","hasFTP","isActuallyEn","hasNoWeirdness","alts","getOwnPropertyNames","clone","months","month","day","formatStr","extract","weekdays","weekday","year","undefined","meridiems","hour","hour12","map","eras","era","field","df","dtFormatter","results","matching","find","m","toLowerCase","value","fastNumbers","other"],"mappings":"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","sourcesContent":["import { hasFormatToParts, hasIntl, padStart, roundTo, hasRelative } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport Settings from \"../settings.js\";\nimport DateTime from \"../datetime.js\";\nimport Formatter from \"./formatter.js\";\n\nlet intlDTCache = {};\nfunction getCachedDTF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let dtf = intlDTCache[key];\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat(locString, opts);\n    intlDTCache[key] = dtf;\n  }\n  return dtf;\n}\n\nlet intlNumCache = {};\nfunction getCachedINF(locString, opts = {}) {\n  const key = JSON.stringify([locString, opts]);\n  let inf = intlNumCache[key];\n  if (!inf) {\n    inf = new Intl.NumberFormat(locString, opts);\n    intlNumCache[key] = inf;\n  }\n  return inf;\n}\n\nlet intlRelCache = {};\nfunction getCachedRTF(locString, opts = {}) {\n  const { base, ...cacheKeyOpts } = opts; // exclude `base` from the options\n  const key = JSON.stringify([locString, cacheKeyOpts]);\n  let inf = intlRelCache[key];\n  if (!inf) {\n    inf = new Intl.RelativeTimeFormat(locString, opts);\n    intlRelCache[key] = inf;\n  }\n  return inf;\n}\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else if (hasIntl()) {\n    const computedSys = new Intl.DateTimeFormat().resolvedOptions().locale;\n    // node sometimes defaults to \"und\". Override that because that is dumb\n    sysLocaleCache = !computedSys || computedSys === \"und\" ? \"en-US\" : computedSys;\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = \"en-US\";\n    return sysLocaleCache;\n  }\n}\n\nfunction parseLocaleString(localeStr) {\n  // I really want to avoid writing a BCP 47 parser\n  // see, e.g. https://github.com/wooorm/bcp-47\n  // Instead, we'll do this:\n\n  // a) if the string has no -u extensions, just leave it alone\n  // b) if it does, use Intl to resolve everything\n  // c) if Intl fails, try again without the -u\n\n  const uIndex = localeStr.indexOf(\"-u-\");\n  if (uIndex === -1) {\n    return [localeStr];\n  } else {\n    let options;\n    const smaller = localeStr.substring(0, uIndex);\n    try {\n      options = getCachedDTF(localeStr).resolvedOptions();\n    } catch (e) {\n      options = getCachedDTF(smaller).resolvedOptions();\n    }\n\n    const { numberingSystem, calendar } = options;\n    // return the smaller one so that we can append the calendar and numbering overrides to it\n    return [smaller, numberingSystem, calendar];\n  }\n}\n\nfunction intlConfigString(localeStr, numberingSystem, outputCalendar) {\n  if (hasIntl()) {\n    if (outputCalendar || numberingSystem) {\n      localeStr += \"-u\";\n\n      if (outputCalendar) {\n        localeStr += `-ca-${outputCalendar}`;\n      }\n\n      if (numberingSystem) {\n        localeStr += `-nu-${numberingSystem}`;\n      }\n      return localeStr;\n    } else {\n      return localeStr;\n    }\n  } else {\n    return [];\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === \"error\") {\n    return null;\n  } else if (mode === \"en\") {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\nfunction supportsFastNumbers(loc) {\n  if (loc.numberingSystem && loc.numberingSystem !== \"latn\") {\n    return false;\n  } else {\n    return (\n      loc.numberingSystem === \"latn\" ||\n      !loc.locale ||\n      loc.locale.startsWith(\"en\") ||\n      (hasIntl() && new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === \"latn\")\n    );\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(intl, forceSimple, opts) {\n    this.padTo = opts.padTo || 0;\n    this.floor = opts.floor || false;\n\n    if (!forceSimple && hasIntl()) {\n      const intlOpts = { useGrouping: false };\n      if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;\n      this.inf = getCachedINF(intl, intlOpts);\n    }\n  }\n\n  format(i) {\n    if (this.inf) {\n      const fixed = this.floor ? Math.floor(i) : i;\n      return this.inf.format(fixed);\n    } else {\n      // to match the browser's numberformatter defaults\n      const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);\n      return padStart(fixed, this.padTo);\n    }\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    this.hasIntl = hasIntl();\n\n    let z;\n    if (dt.zone.universal && this.hasIntl) {\n      // Chromium doesn't support fixed-offset zones like Etc/GMT+8 in its formatter,\n      // See https://bugs.chromium.org/p/chromium/issues/detail?id=364374.\n      // So we have to make do. Two cases:\n      // 1. The format options tell us to show the zone. We can't do that, so the best\n      // we can do is format the date in UTC.\n      // 2. The format options don't tell us to show the zone. Then we can adjust them\n      // the time and tell the formatter to show it to us in UTC, so that the time is right\n      // and the bad zone doesn't show up.\n      // We can clean all this up when Chrome fixes this.\n      z = \"UTC\";\n      if (opts.timeZoneName) {\n        this.dt = dt;\n      } else {\n        this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n      }\n    } else if (dt.zone.type === \"local\") {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    if (this.hasIntl) {\n      const intlOpts = Object.assign({}, this.opts);\n      if (z) {\n        intlOpts.timeZone = z;\n      }\n      this.dtf = getCachedDTF(intl, intlOpts);\n    }\n  }\n\n  format() {\n    if (this.hasIntl) {\n      return this.dtf.format(this.dt.toJSDate());\n    } else {\n      const tokenFormat = English.formatString(this.opts),\n        loc = Locale.create(\"en-US\");\n      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);\n    }\n  }\n\n  formatToParts() {\n    if (this.hasIntl && hasFormatToParts()) {\n      return this.dtf.formatToParts(this.dt.toJSDate());\n    } else {\n      // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings\n      // and IMO it's too weird to have an uncanny valley like that\n      return [];\n    }\n  }\n\n  resolvedOptions() {\n    if (this.hasIntl) {\n      return this.dtf.resolvedOptions();\n    } else {\n      return {\n        locale: \"en-US\",\n        numberingSystem: \"latn\",\n        outputCalendar: \"gregory\"\n      };\n    }\n  }\n}\n\n/**\n * @private\n */\nclass PolyRelFormatter {\n  constructor(intl, isEnglish, opts) {\n    this.opts = Object.assign({ style: \"long\" }, opts);\n    if (!isEnglish && hasRelative()) {\n      this.rtf = getCachedRTF(intl, opts);\n    }\n  }\n\n  format(count, unit) {\n    if (this.rtf) {\n      return this.rtf.format(count, unit);\n    } else {\n      return English.formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== \"long\");\n    }\n  }\n\n  formatToParts(count, unit) {\n    if (this.rtf) {\n      return this.rtf.formatToParts(count, unit);\n    } else {\n      return [];\n    }\n  }\n}\n\n/**\n * @private\n */\n\nexport default class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  }\n\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale,\n      // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n      localeR = specifiedLocale || (defaultToEN ? \"en-US\" : systemLocale()),\n      numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,\n      outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n    intlDTCache = {};\n    intlNumCache = {};\n    intlRelCache = {};\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\n    const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);\n\n    this.locale = parsedLocale;\n    this.numberingSystem = numbering || parsedNumberingSystem || null;\n    this.outputCalendar = outputCalendar || parsedOutputCalendar || null;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n    this.fastNumbersCached = null;\n  }\n\n  get fastNumbers() {\n    if (this.fastNumbersCached == null) {\n      this.fastNumbersCached = supportsFastNumbers(this);\n    }\n\n    return this.fastNumbersCached;\n  }\n\n  listingMode(defaultOK = true) {\n    const intl = hasIntl(),\n      hasFTP = intl && hasFormatToParts(),\n      isActuallyEn = this.isEnglish(),\n      hasNoWeirdness =\n        (this.numberingSystem === null || this.numberingSystem === \"latn\") &&\n        (this.outputCalendar === null || this.outputCalendar === \"gregory\");\n\n    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOK) {\n      return \"error\";\n    } else if (!hasFTP || (isActuallyEn && hasNoWeirdness)) {\n      return \"en\";\n    } else {\n      return \"intl\";\n    }\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone(Object.assign({}, alts, { defaultToEN: true }));\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone(Object.assign({}, alts, { defaultToEN: false }));\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, () => {\n      const intl = format ? { month: length, day: \"numeric\" } : { month: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, \"month\"));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: \"numeric\", month: \"long\", day: \"numeric\" }\n          : { weekday: length },\n        formatStr = format ? \"format\" : \"standalone\";\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays(dt =>\n          this.extract(dt, intl, \"weekday\")\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      undefined,\n      defaultOK,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: \"numeric\", hour12: true };\n          this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(\n            dt => this.extract(dt, intl, \"dayperiod\")\n          );\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, () => {\n      const intl = { era: length };\n\n      // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>\n          this.extract(dt, intl, \"era\")\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find(m => m.type.toLowerCase() === field);\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}) {\n    // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)\n    // (in contrast, the rest of the condition is used heavily)\n    return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  relFormatter(opts = {}) {\n    return new PolyRelFormatter(this.intl, this.isEnglish(), opts);\n  }\n\n  isEnglish() {\n    return (\n      this.locale === \"en\" ||\n      this.locale.toLowerCase() === \"en-us\" ||\n      (hasIntl() && new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith(\"en-us\"))\n    );\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}