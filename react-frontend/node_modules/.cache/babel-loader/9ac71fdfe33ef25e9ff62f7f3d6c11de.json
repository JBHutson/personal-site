{"ast":null,"code":"import _classCallCheck from \"/Users/jameshutson/Code/jameshutson_v2.0/personal-site/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jameshutson/Code/jameshutson_v2.0/personal-site/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jameshutson/Code/jameshutson_v2.0/personal-site/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/jameshutson/Code/jameshutson_v2.0/personal-site/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { formatOffset as _formatOffset, parseZoneInfo, hasIntl } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\nvar singleton = null;\n/**\n * Represents the local zone for this Javascript environment.\n * @implements {Zone}\n */\n\nvar LocalZone = /*#__PURE__*/function (_Zone) {\n  _inherits(LocalZone, _Zone);\n\n  var _super = _createSuper(LocalZone);\n\n  function LocalZone() {\n    _classCallCheck(this, LocalZone);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LocalZone, [{\n    key: \"offsetName\",\n\n    /** @override **/\n    value: function offsetName(ts, _ref) {\n      var format = _ref.format,\n          locale = _ref.locale;\n      return parseZoneInfo(ts, format, locale);\n    }\n    /** @override **/\n\n  }, {\n    key: \"formatOffset\",\n    value: function formatOffset(ts, format) {\n      return _formatOffset(this.offset(ts), format);\n    }\n    /** @override **/\n\n  }, {\n    key: \"offset\",\n    value: function offset(ts) {\n      return -new Date(ts).getTimezoneOffset();\n    }\n    /** @override **/\n\n  }, {\n    key: \"equals\",\n    value: function equals(otherZone) {\n      return otherZone.type === \"local\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"type\",\n\n    /** @override **/\n    get: function get() {\n      return \"local\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      if (hasIntl()) {\n        return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n      } else return \"local\";\n    }\n    /** @override **/\n\n  }, {\n    key: \"universal\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }], [{\n    key: \"instance\",\n\n    /**\n     * Get a singleton instance of the local zone\n     * @return {LocalZone}\n     */\n    get: function get() {\n      if (singleton === null) {\n        singleton = new LocalZone();\n      }\n\n      return singleton;\n    }\n  }]);\n\n  return LocalZone;\n}(Zone);\n\nexport { LocalZone as default };","map":{"version":3,"sources":["/Users/jameshutson/Code/jameshutson_v2.0/personal-site/react-frontend/node_modules/luxon/src/zones/localZone.js"],"names":["formatOffset","parseZoneInfo","hasIntl","Zone","singleton","LocalZone","ts","format","locale","offset","Date","getTimezoneOffset","otherZone","type","Intl","DateTimeFormat","resolvedOptions","timeZone"],"mappings":";;;;AAAA,SAASA,YAAY,IAAZA,aAAT,EAAuBC,aAAvB,EAAsCC,OAAtC,QAAqD,iBAArD;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,IAAIC,SAAS,GAAG,IAAhB;AAEA;;;;;IAIqBC,S;;;;;;;;;;;;;;AA6BnB;+BACWC,E,QAAwB;AAAA,UAAlBC,MAAkB,QAAlBA,MAAkB;AAAA,UAAVC,MAAU,QAAVA,MAAU;AACjC,aAAOP,aAAa,CAACK,EAAD,EAAKC,MAAL,EAAaC,MAAb,CAApB;AACD;AAED;;;;iCACaF,E,EAAIC,M,EAAQ;AACvB,aAAOP,aAAY,CAAC,KAAKS,MAAL,CAAYH,EAAZ,CAAD,EAAkBC,MAAlB,CAAnB;AACD;AAED;;;;2BACOD,E,EAAI;AACT,aAAO,CAAC,IAAII,IAAJ,CAASJ,EAAT,EAAaK,iBAAb,EAAR;AACD;AAED;;;;2BACOC,S,EAAW;AAChB,aAAOA,SAAS,CAACC,IAAV,KAAmB,OAA1B;AACD;AAED;;;;;AArCA;wBACW;AACT,aAAO,OAAP;AACD;AAED;;;;wBACW;AACT,UAAIX,OAAO,EAAX,EAAe;AACb,eAAO,IAAIY,IAAI,CAACC,cAAT,GAA0BC,eAA1B,GAA4CC,QAAnD;AACD,OAFD,MAEO,OAAO,OAAP;AACR;AAED;;;;wBACgB;AACd,aAAO,KAAP;AACD;;;wBAuBa;AACZ,aAAO,IAAP;AACD;;;;AAnDD;;;;wBAIsB;AACpB,UAAIb,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,GAAG,IAAIC,SAAJ,EAAZ;AACD;;AACD,aAAOD,SAAP;AACD;;;;EAVoCD,I;;SAAlBE,S","sourcesContent":["import { formatOffset, parseZoneInfo, hasIntl } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this Javascript environment.\n * @implements {Zone}\n */\nexport default class LocalZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {LocalZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"local\";\n  }\n\n  /** @override **/\n  get name() {\n    if (hasIntl()) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return \"local\";\n  }\n\n  /** @override **/\n  get universal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"local\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}