{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PortfolioPage","lazy","BlogPage","FrontPage","TutorialPage","Navbar","Footer","App","window","localStorage","clear","key","initValue","useState","item","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","useLocalStorage","useMediaQuery","noSsr","darkMode","setDarkMode","theme","createMuiTheme","palette","type","primary","light","main","dark","contrastText","secondary","classes","makeStyles","paper","minHeight","display","flexDirection","space","flexGrow","useStyles","responsiveFontSizes","Paper","className","exact","path","opacity","translateY","Boolean","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yTAWMA,EAAgBC,gBAAK,kBAAM,8DAC3BC,EAAWD,gBAAK,kBAAM,iCACtBE,EAAYF,gBAAK,kBAAM,iCACvBG,EAAeH,gBAAK,kBAAM,iCAC1BI,EAASJ,gBAAK,kBAAM,wDACpBK,EAASL,gBAAK,kBAAM,iCAuGXM,MAnGf,WACEC,OAAOC,aAAaC,QACpB,IAFY,EA2EZ,SAAyBC,EAAKC,GAAW,IAAD,EACAC,oBAAS,WAC7C,IACE,IAAMC,EAAON,OAAOC,aAAaM,QAAQJ,GACzC,OAAOG,EAAOE,KAAKC,MAAMH,GAAQF,EACjC,MAAOM,GACPC,QAAQC,IAAIF,OANsB,mBAC/BG,EAD+B,KAClBC,EADkB,KAoBtC,MAAO,CAACD,EAVS,SAAAE,GACf,IACE,IAAMC,EAAeD,aAAiBE,SAAWF,EAAMF,GAAeE,EACtED,EAAeE,GACfhB,OAAOC,aAAaiB,QAAQf,EAAKK,KAAKW,UAAUH,IAChD,MAAON,GACPC,QAAQC,IAAIF,MAxFcU,CAAgB,WADxBC,YAAc,+BAAgC,CAAEC,OAAO,KAFnE,mBAGLC,EAHK,KAGKC,EAHL,KAKRC,EAAQC,IAAe,CACzBC,QAAS,CACPC,KAAML,EAAW,OAAQ,QACzBM,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAgBdE,EAXYC,IAAW,CAC3BC,MAAO,CACLC,UAAW,QACXC,QAAS,OACTC,cAAe,UAEjBC,MAAO,CACLC,SAAU,IAIEC,GAId,OAFFlB,EAAQmB,IAAoBnB,GAGxB,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAkBA,MAAOA,GACvB,kBAACoB,EAAA,EAAD,CAAOC,UAAWX,EAAQE,OACxB,kBAACxC,EAAD,CAAQ0B,SAAUA,EAAUC,YAAaA,IACzC,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAOC,QAAS,CAAC,EAAG,GAAIC,WAAY,CAAC,QAAS,IAC5C,kBAACvD,EAAD,QAGJ,kBAAC,IAAD,CAAOqD,KAAK,cACV,kBAAC,IAAD,CAAOC,QAAS,CAAC,EAAG,GAAIC,WAAY,CAAC,QAAS,IAC5C,kBAAC1D,EAAD,QAGJ,kBAAC,IAAD,CAAOwD,KAAK,SACV,kBAAC,IAAD,CAAOC,QAAS,CAAC,EAAG,GAAIC,WAAY,CAAC,QAAS,IAC5C,kBAACxD,EAAD,QAGJ,kBAAC,IAAD,CAAOsD,KAAK,aACV,kBAAC,IAAD,CAAOC,QAAS,CAAC,EAAG,GAAIC,WAAY,CAAC,QAAS,IAC5C,kBAACtD,EAAD,UAKR,yBAAKkD,UAAWX,EAAQM,QACxB,kBAAC3C,EAAD,UC5EUqD,QACW,cAA7BnD,OAAOoD,SAASC,UAEe,UAA7BrD,OAAOoD,SAASC,UAEhBrD,OAAOoD,SAASC,SAASC,MACvB,2DCXN,IAAM7B,EAAQC,YAAe,IAI7B6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAejC,MAAOA,GACpB,kBAAC,WAAD,CAAUkC,SAAU,4CAClB,kBAAC,EAAD,SAINC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1D,GACLC,QAAQD,MAAMA,EAAM2D,a","file":"js/main.5a41c32b.chunk.js","sourcesContent":["import React, { useState, lazy } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Paper from '@material-ui/core/Paper';\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport responsiveFontSizes from '@material-ui/core/styles/responsiveFontSizes';\n\nimport Anime from 'react-anime';\n\nconst PortfolioPage = lazy(() => import('./components/Portfolio'));\nconst BlogPage = lazy(() => import('./components/Blog'));\nconst FrontPage = lazy(() => import('./components/Front'));\nconst TutorialPage = lazy(() => import('./components/Tutorial'));\nconst Navbar = lazy(() => import('./components/Navbar'));\nconst Footer = lazy(() => import('./components/Footer'));\n\n\n\nfunction App(){\n  window.localStorage.clear();\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', { noSsr: true });\n  const [darkMode, setDarkMode] = useLocalStorage('darkMode', prefersDarkMode);\n\n  let theme = createMuiTheme({\n    palette: {\n      type: darkMode ? 'dark': 'light',\n      primary: {\n        light: '#1769aa',\n        main: '#2196f3',\n        dark: '#4dabf5',\n        contrastText: '#fff',\n      },\n      secondary: {\n        light: '#41257b',\n        main: '#5e35b1',\n        dark: '#7e5dc0',\n        contrastText: '#000',\n      },\n    },\n  });\n\n  const useStyles = makeStyles({\n    paper: {\n      minHeight: '100vh',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    space: {\n      flexGrow: 1\n    }\n  });\n\n  const classes = useStyles();\n\n  theme = responsiveFontSizes(theme);\n\n    return (\n      <BrowserRouter>\n      <MuiThemeProvider theme={theme}>\n        <Paper className={classes.paper}>\n          <Navbar darkMode={darkMode} setDarkMode={setDarkMode}/>\n          <main>\n            <Switch>\n              <Route exact path=\"/\">\n                <Anime opacity={[0, 1]} translateY={['100vh', 0]}>\n                  <FrontPage/>\n                </Anime>\n              </Route>\n              <Route path=\"/portfolio\">\n                <Anime opacity={[0, 1]} translateY={['100vh', 0]}>\n                  <PortfolioPage/>\n                </Anime>\n              </Route>\n              <Route path=\"/blog\">\n                <Anime opacity={[0, 1]} translateY={['100vh', 0]}>\n                  <BlogPage/>\n                </Anime>\n              </Route>\n              <Route path=\"/tutorial\">\n                <Anime opacity={[0, 1]} translateY={['100vh', 0]}>\n                  <TutorialPage/>\n                </Anime>\n              </Route>\n            </Switch>\n          </main>\n          <div className={classes.space}></div>\n          <Footer/>\n        </Paper>\n        </MuiThemeProvider>\n      </BrowserRouter>\n    );\n  };\n\n  function useLocalStorage(key, initValue){\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        const item = window.localStorage.getItem(key);\n        return item ? JSON.parse(item) : initValue;\n      } catch (error) {\n        console.log(error);\n      }\n    });\n\n    const setValue = value => {\n      try {\n        const valueToStore = value instanceof Function ? value(storedValue) : value;\n        setStoredValue(valueToStore);\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    return [storedValue, setValue];\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React,  {Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Suspense fallback={<div>Loading...</div>}>\n        <App />\n      </Suspense>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}